# -*- coding: utf-8 -*-
"""Assignment06_CSE111.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L1GrHb7vDlFABI5t0Efw2sTlxqaxDGMb

#1
"""

class Student:
    id = 0
    def __init__(self,name,dept,age,cgpa):
        self.name = name
        self.department = dept
        self.age = age
        self.cgpa = cgpa
        Student.id +=1



    def showDetails(self):
        print(f'ID: {Student.id}')
        print(f'Name: {self.name}')
        print(f'Department: {self.department}')
        print(f'Age: {self.age}')
        print(f'CGPA: {self.cgpa}')

    @classmethod
    def from_String(cls,value):
        a = value.split('-')
        return cls(a[0],a[1],a[2],a[3])

s1 = Student("Samin", "CSE", 21, 3.91)
s1.showDetails()
print("-----------------------")
s2 = Student("Fahim", "ECE", 21, 3.85)
s2.showDetails()
print("-----------------------")
s3 = Student("Tahura", "EEE", 22, 3.01)
s3.showDetails() 
print("-----------------------")
s4 = Student.from_String("Sumaiya-BBA-23-3.96")
s4.showDetails()

"""#2"""

class Assassin:
    number_of_assaissin = 0
    def __init__(self, name,rate):
        self.name = name
        self.rate = rate
        Assassin.number_of_assaissin +=1

    def printDetails(self):
        print(f'Name: {self.name}')
        print(f'Success rate: {self.rate}%')
        print(f'Total number of Assassin: {Assassin.number_of_assaissin}')

    @classmethod
    def failureRate(cls,name,rate):
        success_rate = 100- rate
        return cls(name, success_rate)
    
    @classmethod
    def failurePercentage(cls,name, rate):
        cls.name = name
        a = rate.strip('%')
        main = int(a)
        success = 100 - main
        return cls(name,success)

john_wick = Assassin('John Wick', 100)
john_wick.printDetails()
print('================================')
nagisa = Assassin.failureRate("Nagisa", 20)
nagisa.printDetails()
print('================================')
akabane = Assassin.failurePercentage("Akabane", "10%")
akabane.printDetails()

"""#3"""

class Passenger:
    count = 0
    fare = 450
    def __init__(self,name):
        self.name = name
        Passenger.count+=1
    def set_bag_weight(self,w):
        self.weight = w
        if self.weight <=20:
            self.fare = Passenger.fare
        elif 21<=self.weight<=50:
            self.fare = Passenger.fare+50
        else:
            self.fare = Passenger.fare + 100

    def printDetail(self):
        print(f'Name: {self.name}')
        print(f'Bus Fare: {self.fare} taka')
        return Passenger.count
print('Total Passenger:', Passenger.count)
p1 = Passenger("Jack")
p1.set_bag_weight(90)
p2 = Passenger("Carol")
p2.set_bag_weight(10)
p3 = Passenger("Mike")
p3.set_bag_weight(25)
print("=========================")
p1.printDetail()
print("=========================")
p2.printDetail()
print("=========================")
p3.printDetail()
print("=========================")
print("Total Passenger:", Passenger.count)

"""#4"""

class Travel:
    count = 0
    time = 1
    def __init__(self,place1,place2):
        self.__source = place1
        self.__destination = place2
        Travel.count +=1

    def set_time(self,time = None):
        if self.__time == None:
            self.__time = Travel.time
        else:
            self.__time = time

    def set_destination(self,other):
        self.__destination = other

    def set_source(self,other):
        self.__source = other

    def display_travel_info(self):
        return (f'Source: {self.__source}\nDestination: {self.__destination}\nFlight Time: {self.__time}:00')

print("No. of Traveller =", Travel.count)
print("=======================")
t1 = Travel("Dhaka","India")
print(t1.display_travel_info())
print("=======================")
t2 = Travel("Kuala Lampur","Dhaka")
t2.set_time(23)
print(t2.display_travel_info())
print("=======================")
t3 = Travel("Dhaka","New_Zealand")
t3.set_time(15)
t3.set_destination("Germany")
print(t3.display_travel_info())
print("=======================")
t4 = Travel("Dhaka","India")
t4.set_time(9)
t4.set_source("Malaysia")
t4.set_destination("Canada")
print(t4.display_travel_info())
print("=======================")
print("No. of Traveller =", Travel.count)

"""#5"""

from datetime import date
class Employee:
    
    def __init__(self,name,time):
        self.name = name
        self.workingPeriod = time

    @staticmethod
    def experienceCheck(a,b):
        if a>=3 and b == 'male':
            return f'He is experienced'
        elif a>=3 and b == 'female':
            return f'She is experienced'
        elif a<3 and b == 'male':
            return f'He is not experienced'
        elif a<3 and b == 'female':
            return f'She is not experienced'
    
    @classmethod
    def employeeByJoiningYear(cls,a,b):
        
        return cls(a,date.today().year-b)

employee1 = Employee('Dororo', 3)
employee2 = Employee.employeeByJoiningYear('Harry', 2016)
print(employee1.workingPeriod)
print(employee2.workingPeriod)
print(employee1.name)
print(employee2.name)
print(Employee.experienceCheck(2, "male"))
print(Employee.experienceCheck(3, "female"))

"""#6"""

class Laptop:
    laptopCount = 0
    
    def __init__(self, name,count):
        self.name = name
        self.count = count
        Laptop.laptopCount += self.count
    @classmethod
    def advantage(cls):
        print('Laptops are portable')

    @classmethod
    def resetCount(cls):
        Laptop.laptopCount = 0


lenovo = Laptop("Lenovo", 5);
dell = Laptop("Dell", 7);
print(lenovo.name, lenovo.count)
print(dell.name, dell.count)
print("Total number of Laptops", Laptop.laptopCount)
Laptop.advantage()
Laptop.resetCount()
print("Total number of Laptops", Laptop.laptopCount)

"""#7"""

class Cat:
    Number_of_cats = 0
    def __init__(self,color,action):
        self.color = color
        self.action = action
        Cat.Number_of_cats +=1
    @classmethod
    def no_parameter(cls):
        color = 'white'
        action = 'sitting'
        return cls(color,action)

    @classmethod
    def first_parameter(cls,color):
        action = 'sitting'
        return cls(color,action)
    @classmethod
    def second_parameter(cls,action):
        color = 'Grey'
        return cls(color,action)
    def printCat(self):
        print(f'{self.color} cat is {self.action}')


    def changeColor(self,other):
        self.color = other

print("Total number of cats:", Cat.Number_of_cats)
c1 = Cat.no_parameter()
c2 = Cat.first_parameter("Black")
c3 = Cat("Brown", "jumping")
c4 = Cat("Red", "purring")
c5 = Cat.second_parameter("playing")
print("=======================")
c1.printCat()
c2.printCat()
c3.printCat()
c4.printCat()
c5.printCat()
c1.changeColor("Blue")
c3.changeColor("Purple")
c1.printCat()
c3.printCat()
print("=======================")
print("Total number of cats:", Cat.Number_of_cats)

"""#8"""

import math

class Cylinder:
    radius = 5
    height = 18
    def __init__(self,var1,var2):

        print(f'Default radius={Cylinder.radius} and height=1{Cylinder.height}.')
        Cylinder.radius = var1
        Cylinder.height =var2
        print(f'Updated: radius={self.radius} and height={self.height}.')
    @staticmethod
    def area(a,b):
        print(f'Area = {2*math.pi*a**2 + 2*math.pi*b}')

    @staticmethod
    def volume(a,b):
        print(f'Volume = {math.pi*a**2*b}')

    @classmethod
    def swap(cls,b,a):
        cls.radius = a
        cls.height = b
        return Cylinder(cls.radius,cls.height)

    @classmethod
    def changeFormat(cls,base):
        main = base.split('-')
        cls.radius = int(main[0])
        cls.height = int(main[1])
        return Cylinder(cls.radius,cls.height)

c1 = Cylinder(0,0)
Cylinder.area(c1.radius,c1.height)
Cylinder.volume(c1.radius,c1.height)
print("===============================")
c2 = Cylinder.swap(8,3)
c2.area(c2.radius,c2.height)
c2.volume(c2.radius,c2.height)
print("===============================")
c3 = Cylinder.changeFormat("7-13")
c3.area(c3.radius,c3.height)
c3.volume(c3.radius,c3.height)
print("===============================")
Cylinder(0.3,5.56).area(Cylinder.radius,Cylinder.height)
print("===============================")
Cylinder(3,5).volume(Cylinder.radius,Cylinder.height)

"""#9"""

from typing_extensions import Self
class Student:
    total = 0
    total_bracu = 0
    total_other = 0
    
    def __init__(self, name, dept, ins = 'BRAC University'):
        self.name = name
        self.department = dept
        self.institute = ins
        if self.institute == 'BRAC University':
            Student.total_bracu+=1
        else:
            Student.total_other+=1
        Student.total +=1

    def individualDetail(self):
        print(f'Name: {self.name}')
        print(f'Department: {self.department}')
        print(f'Institution: {self.institute}')

    @classmethod
    def printDetails(cls):
        print(f'Total Student(s): {Student.total}')
        print(f'BRAC University Student(s): {Student.total_bracu}')
        print(f'Other Institution Student(s): {Student.total_other}')

    @classmethod
    def createStudent(cls,name,dept,ins = 'None'):
        if ins == "None":
            return cls(name,dept)
        else:
            return cls(name,dept,ins)

Student.printDetails()
print('#########################')

mikasa = Student('Mikasa Ackerman', "CSE")
mikasa.individualDetail()
print('------------------------------------------')
Student.printDetails()

print('========================')

harry = Student.createStudent('Harry Potter', "Defence Against Dark Arts", "Hogwarts School")
harry.individualDetail()
print('-------------------------------------------')
Student.printDetails()

print('=========================')

levi = Student.createStudent("Levi Ackerman", "CSE")
levi.individualDetail()
print('--------------------------------------------')
Student.printDetails()

"""#10"""

class SultansDine:
    branch = 0
    sell = 0
    info = []
    def __init__(self,location):
        self.location = location
        SultansDine.branch +=1
    
    def sellQuantity(self,quantity):
        self.quantity = quantity
        if self.quantity <10:
            self.sell = self.quantity * 300
        elif self.quantity <20:
            self.sell = self.quantity * 350
        else:
            self.sell = self.quantity * 400
        
        SultansDine.sell += self.sell


    def branchInformation(self):
        print(f'Branch Name: {self.location}')
        print(f'Branch Sell: {SultansDine.sell} Taka')
        SultansDine.info.append(self.location)
        SultansDine.info.append(self.sell)

    @classmethod
    def details(cls):
        print(f"Total Number of branch(s): {cls.branch}")
        print(f"Total Sell: {cls.sell}")

        for index in range(0, len(SultansDine.info), 2):
            print(f"Branch Name: {SultansDine.info[index]}, Branch Sell: {SultansDine.info[index + 1]} Taka")
            print(f"Branch consists of total sell's: {(SultansDine.info[index + 1] / SultansDine.sell) * 100:.2f}%")
        
SultansDine.details()
print('########################')
dhanmodi = SultansDine('Dhanmondi')
dhanmodi.sellQuantity(25)
dhanmodi.branchInformation()
print('-----------------------------------------')
SultansDine.details()

print('========================')

baily_road = SultansDine('Baily Road')
baily_road.sellQuantity(15)
baily_road.branchInformation()
print('-----------------------------------------')
SultansDine.details()

print('========================')

gulshan = SultansDine('Gulshan')
gulshan.sellQuantity(9)
gulshan.branchInformation()
print('-----------------------------------------')
SultansDine.details()

"""#11"""

class Puzzle:
    x = 0
    def methodA(self):
        Puzzle.x = 5 
        z = Puzzle.x + self.methodB(Puzzle.x)
        print(Puzzle.x, z)
        z = self.methodB(z + 2) + Puzzle.x
        print(Puzzle.x, z)
        self.methodB(Puzzle.x, z)
        print(Puzzle.x, z)
    def methodB(self, *args):
        if len(args) == 1:
            y = args[0]
            Puzzle.x = y + Puzzle.x
            print(Puzzle.x, y)
            return Puzzle.x + 3
        else:
            z, x = args
            z = z + 1
            x = x + 1
            print(z, x)
p = Puzzle()
p.methodA()
p.methodA()
p = Puzzle()
p.methodA()
p.methodB(7)

"""#12"""

class FinalT6A:
    temp = 3
 
    def __init__(self, x, p):
        self.sum, self.y = 0, 2
        FinalT6A.temp += 3
        self.y = self.temp - p
        self.sum = self.temp + x
        print(x, self.y, self.sum)
    
    def methodA(self):
        x, y = 0, 0
        y = y + self.y
        x = self.y + 2 + self.temp
        self.sum = x + y + self.methodB(self.temp, y)
        print(x, y, self.sum)
    
    def methodB(self, temp, n):
        x = 0
        FinalT6A.temp += 1
        self.y = self.y + (FinalT6A.temp)
        FinalT6A.temp -= 1
        x = x + 2 + n
        self.sum = self.sum + x + self.y
        print(x, self.y, self.sum)
        return self.sum

q1 = FinalT6A(2,1)
q1.methodA()
q1.methodA()

"""#14"""

class msgClass:
    def __init__(self):
        self.content = 0
 
class Quiz3:
    x = 0
    def __init__(self, k = None):
        self.sum, self.y = 0, 0
        if k is None:
            self.sum = 5
            Quiz3.x = 2
            self.y = 2
        else:
            self.sum = self.sum + k
            self.y = 3
            Quiz3.x += 2    
    def methodA(self):
        x = 1
        y = 1
        msg = [None]
        myMsg = msgClass()
        myMsg.content = Quiz3.x
        msg[0] = myMsg
        msg[0].content = self.y + myMsg.content
        self.y = self.y + self.methodB(msg[0])
        y = self.methodB(msg[0]) + self.y
        x = y + self.methodB(msg, msg[0])
        self.sum = x + y + msg[0].content
        print(x, y, self.sum)
    def methodB(self, *args):
        if len(args) == 2:
            mg2, mg1 = args
            x = 2
            self.y = self.y + mg2[0].content
            mg2[0].content = self.y + mg1.content
            x = x + 2 + mg1.content
            self.sum = self.sum + x + self.y
            mg1.content = self.sum - mg2[0].content
            print(Quiz3.x, self.y, self.sum)
            return self.sum
        
        elif len(args) == 1:
            mg1, = args
            x = 1
            y = 2
            y = self.sum + mg1.content
            self.y = y + mg1.content
            x = Quiz3.x + 5 + mg1.content
            self.sum = self.sum + x + y
            Quiz3.x = mg1.content + x + 3
            print(x, y, self.sum)
            return y

a1 = Quiz3()
a2 = Quiz3(5)
msg = msgClass()
a1.methodA()
a2.methodB(msg)